version: 2.1

references:
  ci_support_image: &ci_support_image
                       broadinstitute/study-server-build:2020-04-10G
  root_path: &root_path
      /home/circleci
  repo_path: &repo_path
              /home/circleci/repo
  m2_cache_key: &m2_cache_key
                  pom.xml1-{{ checksum "pom.xml" }}
  m2_cache_restore_key: &m2_cache_keys
    keys:
      - *m2_cache_key
      - pom.xml1-
  m2_repo_path: &m2_repo_path
             /home/circleci/.m2/repository
  pepper_apis-path: &pepper_apis_path
            /home/circleci/repo/pepper-apis
  api-spec-path: &api-spec-path
            /home/circleci/repo/pepper-apis/docs/specification
  circleci_path: &circleci_path
            /home/circleci/repo/.circleci
  builds_bucket: &builds_bucket
            ddp-build-artifacts
  jar_build_bucket_dir: &jar_build_bucket_dir
        /ddp-study-server-pepper-apis
  housekeeping_test_db: &housekeeping_test_db
      housekeepingdb
  studyserver_test_db: &studyserver_test_db
      studyservicedb


executors:
  build-executor:
    docker:
      - image: broadinstitute/study-server-build:java-2020-04-15A
  test-executor:
    docker:
      - image: broadinstitute/study-server-build:java-2020-04-15A
      # start pubsub emulator
      - image: broadinstitute/study-server-build:pubsub-1
      - image: circleci/mysql:5.7-ram
        environment: &DB_VARS
          MYSQL_ROOT_PASSWORD: rootpw
          MYSQL_DATABASE: test_db
          MYSQL_USER: user
          MYSQL_PASSWORD: passw0rd
    resource_class: medium+ #default medium not big enough for tests

  deploy-executor:
    docker: # todo: create new image endpoint, add this in admin tab for faster starts
    - image: *ci_support_image

commands:
  compile:
    description: Run maven compile
    parameters:
      m2_repo:
        type: string
        default: *m2_repo_path
      root_path:
        type: string
        default: *root_path
    steps:
      - restore_cache: *m2_cache_keys
      - run:
          name: Run maven
          command: |
            # Some images the $HOME directory is not writable. Let's be specific for .m2/repository location
            mvn test-compile package -DskipTests -file pom.xml -Dmaven.repo.local=<< parameters.m2_repo >>
            # mvn package -DskipTests -f housekeeping-pom.xml -Dcheckstyle.skip -Dmaven.repo.local=<< parameters.m2_repo >>
      - save_cache:
          key: *m2_cache_key
          paths:
            - << parameters.root_path >>/.m2
  build-jar:
    description: Build jar
    parameters:
      pom_file:
        type: string
      m2_repo:
        type: string
        default: *m2_repo_path
    steps:
      - restore_cache: *m2_cache_keys
      - run:
          name: Run maven package
          command: |
            mvn package -DskipTests -file << parameters.pom_file >> -Dcheckstyle.skip -Dmaven.repo.local=<< parameters.m2_repo >>
  setup-shared-env:
    description: "Setup shared ENV vars used by multiple scripts"
    steps:
      - run:
          name: Set environment to be used by build
          command: |
            echo "export VAULT_TOKEN=$(vault write -field=token auth/approle/login role_id=$VAULT_ROLE_ID secret_id=$VAULT_ROLE_SECRET_ID)" >> $BASH_ENV
            echo "export SHORT_GIT_SHA=$(echo '<< pipeline.git.revision >>' | cut -c 1-7)" >> $BASH_ENV
            source $BASH_ENV

  set-deployment-env:
    description: "Determine the deploy target and set the ENVIRONMENT var"
    steps:
      - run:
          name: Determine deployment environment for branch << pipeline.git.branch >>
          command: |
            case "<< pipeline.git.branch >>" in
            develop)
              DEPLOY_ENV=dev
            ;;
            # @todo remove when done
              study-server-parallel-tests)
              DEPLOY_ENV=dev
            ;;
            test)
              DEPLOY_ENV=test
            ;;
            test_deleteme1)
              DEPLOY_ENV=dev
            ;;
            staging)
              DEPLOY_ENV=staging
            ;;
            staging)
              DEPLOY_ENV=prod
            ;;
            *)
              echo "Cannot map << pipeline.git.branch >> to a deployment environment"
              exit 17
            ;;
            esac
            echo "Setting deployment ENVIRONMENT to $DEPLOY_ENV"
            echo "export ENVIRONMENT=$DEPLOY_ENV" >> $BASH_ENV
            source $BASH_ENV          

  render-configs:
    description: render config files
    steps:
      - run:
          name: show environment variables
          command: env
      - run:
          name: api-build.sh
          command: ./api-build.sh v1 ${ENVIRONMENT:-dev} . --gae-config
          environment:
            USE_DOCKER: false

  setup-test-dbs:
    description: setup the test databases. Ensure up and running
    parameters:
      studyserverdb:
        type: string
        default: *studyserver_test_db
      housekeepingdb:
        type: string
        default: *housekeeping_test_db
    steps:
      - run:
          name: Waiting for MySQL to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1
      - run:
          name: Setup test databases
          command: |
            mysql -h 127.0.0.1 -u root --password=$MYSQL_ROOT_PASSWORD test_db --execute="CREATE DATABASE << parameters.studyserverdb >> CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci"
            mysql -h 127.0.0.1 -u root --password=$MYSQL_ROOT_PASSWORD test_db --execute="CREATE DATABASE << parameters.housekeepingdb >> CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci"
          environment: *DB_VARS
    
  show-pipeline-vars:
    description: "Show pipeline vars"
    steps:
      - run:
          name: Show pipeline vars
          command: |
            echo "pipeline.id << pipeline.id >>"
            echo "pipeline.number  << pipeline.number  >>"
            echo "pipeline.project.git_url << pipeline.project.git_url >>"
            echo "pipeline.project.type << pipeline.project.type >>"
            echo "pipeline.git.tag << pipeline.git.tag >>"
            echo "pipeline.git.branch << pipeline.git.branch >>"
            echo "pipeline.git.revision << pipeline.git.revision >>"
            echo "pipeline.git.base_revision << pipeline.git.base_revision >>"

  store-jar:
    description: Store jar in bucket
    parameters:
      jar_base_name:
        type: string
      builds_bucket:
        type: string
        default: *builds_bucket
      jar_build_bucket_dir:
        type: string
        default: *jar_build_bucket_dir
    steps:
      - auth-gcp-service-account:
          env: prod
      - run:
          name: Store jar <<parameters.jar_base_name>>
          command: |
            set -u
            DATE=`date +%F`
            BUILDS_BUCKET='<<parameters.builds_bucket>>'
            JAR_BASE_NAME='<<parameters.jar_base_name>>'
            JAR_BUILD_BUCKET_DIR='<<parameters.jar_build_bucket_dir>>'
            JAR_FILE_NAME="${JAR_BASE_NAME}_${DATE}_${SHORT_GIT_SHA}.jar"
            LOCAL_JAR_FILE_PATH="./target/${JAR_BASE_NAME}.jar"
            JAR_BUCKET_URL="gs://${BUILDS_BUCKET}${JAR_BUILD_BUCKET_DIR}/${JAR_FILE_NAME}"
            gsutil cp "${LOCAL_JAR_FILE_PATH}" "${JAR_BUCKET_URL}"
            echo "${JAR_FILE_NAME} successfully uploaded to ${JAR_BUCKET_URL}"
  
  retrieve-jar:
    description: Get <<parameters.jar_base_name>> jar from bucket
    parameters:
      jar_base_name:
        type: string
      builds_bucket:
        type: string
        default: *builds_bucket
      jar_build_bucket_dir:
        type: string
        default: *jar_build_bucket_dir
    steps:
      - auth-gcp-service-account:
          env: prod
      - run:
          name: Retrieve <<parameters.jar_base_name>> jar from bucket
          command: |
            set -u
            set +e
            BUILDS_BUCKET='<<parameters.builds_bucket>>'
            JAR_BASE_NAME='<<parameters.jar_base_name>>'
            JAR_BUILD_BUCKET_DIR='<<parameters.jar_build_bucket_dir>>'
            JAR_FILE_URL_PATTERN="gs://${BUILDS_BUCKET}${JAR_BUILD_BUCKET_DIR}/${JAR_BASE_NAME}_*_${SHORT_GIT_SHA}.jar"
            echo "Checking for ${JAR_FILE_URL_PATTERN}"
            # For some reason following line generating exit code 1 every time in CircleCI. Use set +e so script can continue
            JAR_FILE_URL=`gsutil ls $JAR_FILE_URL_PATTERN  | sort -r | head -1`
            if [ -z $JAR_FILE_URL ]
              then
                echo "Could not find archive using pattern ${JAR_FILE_URL_PATTERN}"
                exit 1
            fi
            JAR_FILE_PATH="target/${JAR_BASE_NAME}.jar"
            mkdir -p $(dirname $JAR_FILE_PATH)
            gsutil cp  $JAR_FILE_URL $JAR_FILE_PATH
            echo ""
  deploy-jar:
    parameters:
      jar_base_name:
        type: string
      deploy_dir:
        type: string
        default: deployment-assets
    steps:
      - set-deployment-env
      - render-configs
      - run:
          name: Gather deployment assets
          command: |
            DEPLOY_DIR='<<parameters.deploy_dir>>'
            rm -rf $DEPLOY_DIR
            mkdir -p $DEPLOY_DIR
            cd $DEPLOY_DIR
            cp ../target/<<parameters.jar_base_name>>.jar .
            cp ../src/appengine/<<parameters.jar_base_name>>.yaml .
            cp ../output-config/application.conf .
            cp -r ../output-config/fc_keys .
      - auth-gcp-service-account
      - run:
          name: Deploy <<parameters.jar_base_name>> to GAE
          command: |
            set -u
            gcloud app deploy --version="${SHORT_GIT_SHA}" --stop-previous-version --project "broad-ddp-${ENVIRONMENT}" <<parameters.deploy_dir>>/<<parameters.jar_base_name>>.yaml
      - update-deployment-sheet:
          jar_base_name: <<parameters.jar_base_name>>
      - run:
          name: Delete previous versions of service
          command: |
            set +x
            # extract the service name from the GAE yaml file
            CONFIG_FILE="<<parameters.deploy_dir>>/<<parameters.jar_base_name>>.yaml"
            SERVICE=$(grep -Eo -m1 "^service:\s*.*" "${CONFIG_FILE}" | awk '{print $2}')
            echo "The service name is *${SERVICE}*"

            # find what other versions are currently running
            # skip first line, exclude our version, print 2nd column
            AWK_COMMMAND="NR > 1 && !/${SHORT_GIT_SHA}/ {print \$2}"
            VERSIONS_TO_DELETE=$(gcloud app versions list --service "${SERVICE}" --project "broad-ddp-${ENVIRONMENT}" | awk "${AWK_COMMMAND}")

            # Sometime deleting versions fails. If there are less than 3 versions then we are not going to worry about it
            # and set flag so this job step does not fail when exit error value is generated
            if [[ ! -z $VERSIONS_TO_DELETE ]] && [[ "${#VERSIONS_TO_DELETE[@]}" -lt 3 ]]; then
              set +e
            fi

            for CURRENT_VERSION in $VERSIONS_TO_DELETE; do
              echo "Deleting version $CURRENT_VERSION of service $SERVICE"
              gcloud app versions delete --quiet --service "$SERVICE" "$CURRENT_VERSION" --project "broad-ddp-${ENVIRONMENT}"
            done;
            :

  delete-old-service-versions:
    parameters:
      deploy_dir:
        type: string
      deploy_config_base_name:
        type: string
        default: app
    steps:
      - run:
          command: |
            set +x
            # extract the service name from the GAE yaml file
            CONFIG_FILE="<<parameters.deploy_dir>>/<<parameters.deploy_config_base_name>>.yaml"
            SERVICE=$(grep -Eo -m1 "^service:\s*.*" "${CONFIG_FILE}" | awk '{print $2}')
            echo "The service name is *${SERVICE}*"

            # find what other versions are currently running
            # skip first line, exclude our version, print 2nd column
            AWK_COMMMAND="NR > 1 && !/${SHORT_GIT_SHA}/ {print \$2}"
            VERSIONS_TO_DELETE=$(gcloud app versions list --service "${SERVICE}" --project "broad-ddp-${ENVIRONMENT}" | awk "${AWK_COMMMAND}")

            # Sometime deleting versions fails. If there are less than 3 versions then we are not going to worry about it
            # and set flag so this job step does not fail when exit error value is generated
            if [[ ! -z $VERSIONS_TO_DELETE ]] && [[ "${#VERSIONS_TO_DELETE[@]}" -lt 3 ]]; then
              set +e
            fi

            for CURRENT_VERSION in $VERSIONS_TO_DELETE; do
              echo "Deleting version $CURRENT_VERSION of service $SERVICE"
              gcloud app versions delete --quiet --service "$SERVICE" "$CURRENT_VERSION" --project "broad-ddp-${ENVIRONMENT}"
            done;
            :

  update-deployment-sheet:
    parameters:
      jar_base_name:
        type: string
    steps:
      - run:
          name: Update deployments sheet
          command: |
            set -u
            set +x
            vault read -format=json secret/pepper/${ENVIRONMENT}/v1/conf  | jq -r .data.gcp.serviceKey |
            /opt/build-utils/reportdeploy.sh "$RELEASE_SHEET_ID" '<<parameters.jar_base_name>> server' "$ENVIRONMENT" "$CIRCLE_BUILD_NUM" "$CIRCLE_BUILD_URL"

  auth-gcp-service-account:
    parameters:
      env:
        type: string
        default: ''
    steps:
      - run:
          name: Call authenticate with GCP with in deployment environment
          command: |
            PARAM_ENV='<< parameters.env >>'
            TARGET_ENV="${PARAM_ENV:-${ENVIRONMENT}}"
            if [[ -z $TARGET_ENV ]]; then
              echo "Target environment was not set"
              exit 1
            else
              echo "Target vault env: $TARGET_ENV"
              echo "From $PWD"
            fi
            vault read --format=json secret/pepper/${TARGET_ENV}/v1/conf |
              jq -r .data.gcp.serviceKey |
              gcloud auth activate-service-account --key-file=-

jobs:
  compile-only-job:
    executor:
      name: build-executor
    working_directory: *pepper_apis_path
    steps:
      - checkout:
          path: *repo_path
      - setup-shared-env
      - compile
      # will be needed for tests later on
      - render-configs
      - persist_to_workspace:
          root: *root_path
          paths:
            - repo

  parallel-tests-job:
    executor:
      name: test-executor
    working_directory: *pepper_apis_path
    parallelism: <<parameters.parallelism>>
    parameters:
      parallelism:
        default: 2
        type: integer
      repo_path:
        type: string
        default: *repo_path
      circleci_path:
        type: string
        default: *circleci_path
      m2_repo:
        type: string
        default: *m2_repo_path
    steps:
      - attach_workspace:
          at: *root_path
      - run:
          name: Split tests
          command: |
            set +x
            set +e
            set -o xtrace
            TEST_DATA_PATH='<< parameters.circleci_path >>/tests'
            mkdir -p "$TEST_DATA_PATH"

            TEST_SRC_DIRECTORY='src/test/java'
            TEST_SEARCH_PATTERN='**/*Test.java'

            SUREFIRE_CLASS_NAMES_PATH="${TEST_DATA_PATH}/surefire_classnames"

            # generate list of tests to be processed
            circleci tests glob "${TEST_SRC_DIRECTORY}/${TEST_SEARCH_PATTERN}" | # fancy circleci find command
              sed -e "s#^${TEST_SRC_DIRECTORY}/\(.*\)\.java#\1#" | # Strip .java and parent directory path
              tr "/" "." > "${SUREFIRE_CLASS_NAMES_PATH}"
            #              tr "/" "." |  #Convert to a class name of form org.package.ClassName
            #              grep -v '.*RouteTest' > "${SUREFIRE_CLASS_NAMES_PATH}" #Exclude RouteTest. These done from suite

            # Test file name pattern does not pick this one up. Add explicitly
            # echo 'org.broadinstitute.ddp.route.IntegrationTestSuite'  >> $SUREFIRE_CLASS_NAMES_PATH

            echo "Total number of test class names collected: $(wc -l $SUREFIRE_CLASS_NAMES_PATH)"

            # tests split will figure out which tests to run in this node
            THIS_NODE_TESTS_PATH=/tmp/this_node_tests
            cat $SUREFIRE_CLASS_NAMES_PATH | \
              circleci tests split --split-by=timings --timings-type=classname > $THIS_NODE_TESTS_PATH


            IGNORE_CLASS_LIST_PATH="${TEST_DATA_PATH}/surefire_classnames_ignore_list"

            # Filter out the ones that don't run in this node
            cat $SUREFIRE_CLASS_NAMES_PATH | \
              grep -xvf $THIS_NODE_TESTS_PATH > $IGNORE_CLASS_LIST_PATH

            // save path for next steps
            echo "export IGNORE_CLASS_LIST_PATH=${IGNORE_CLASS_LIST_PATH}" >> $BASH_ENV
            source $BASH_ENV
            echo "Total number of test classes that will be skipped in this node: $(wc -l $IGNORE_CLASS_LIST_PATH)"
      - store_artifacts:
          path: << parameters.circleci_path>>/tests/
      - setup-test-dbs
      - restore_cache: *m2_cache_keys
      - run:
          name: Run tests
          command: |
            echo "The value of IGNORE_CLASS_LIST_PATH=${IGNORE_CLASS_LIST_PATH}"
            mvn --batch-mode -Dcheckstyle.skip test -f pom.xml \
                    -Ditext.license=output-config/itextkey.xml \
                    -Dddp.firecloudKeysDir=output-config/fc_keys \
                    -Dconfig.file=output-config/testing-circleci.conf  \
                    -Dmaven.repo.local=<< parameters.m2_repo >> \
                    -Dsurefire.excludesFile=$IGNORE_CLASS_LIST_PATH   # Key line to do tests in parallel

      - store_test_results:
          path: target/surefire-reports

  store-jar-job:
    executor:
      name: deploy-executor
    working_directory: *pepper_apis_path
    steps:
      - attach_workspace:
          at: *root_path
      - setup-shared-env
      - build-jar:
          pom_file: pom.xml
      - store-jar:
          jar_base_name: DataDonationPlatform
      - build-jar:
          pom_file: housekeeping-pom.xml
      - store-jar:
          jar_base_name: Housekeeping

  deploy-workspace-jar-job:
    executor:
      name: deploy-executor
    working_directory: *pepper_apis_path
    steps:
      - attach_workspace:
          at: *root_path
      - setup-shared-env
      - build-jar:
          pom_file: pom.xml
      - deploy-jar:
          jar_base_name: DataDonationPlatform
      - build-jar:
          pom_file: housekeeping-pom.xml
      - deploy-jar:
          jar_base_name: Housekeeping

  deploy-stored-jar-job:
    executor:
      name: deploy-executor
    working_directory: *pepper_apis_path
    steps:
      - checkout:
          path: *repo_path
      - setup-shared-env
      - retrieve-jar:
          jar_base_name: DataDonationPlatform
      - deploy-jar:
          jar_base_name: DataDonationPlatform
      - retrieve-jar:
          jar_base_name: Housekeeping
      - deploy-jar:
          jar_base_name: Housekeeping    

  deploy-docs-job:
    executor:
      name: deploy-executor
    working_directory: *api-spec-path
    steps:
      - checkout:
          path: *repo_path
      - run:
          name: Build docs
          command: ./build.sh documentation
      - setup-shared-env
      - auth-gcp-service-account
      - run:
          name: Deploy docs website
          command: |
            set -u
            gcloud app deploy --version="${SHORT_GIT_SHA}" --stop-previous-version --project "broad-ddp-${ENVIRONMENT}" deploy/app.yaml
      - delete-old-service-versions:
            deploy_dir: deploy

parameters:
  on_demand:
    type: boolean
    default: false

workflows:
  version: 2

  run-tests-on-demand-workflow:
    when: << pipeline.parameters.on_demand >>
    jobs:
      - compile-only-job
      - parallel-tests-job:
          parallelism: 5
          requires:
            - compile-only-job

  build-test-store-deploy-workflow:
    unless: << pipeline.parameters.on_demand >>
    jobs:
      - compile-only-job: &compile_and_test_filters
          filters: 
            branches:
              only:
                - develop
                - &rc /^rc.*/
                - &hotfix /^hotfix.*/
                - study-server-parallel-tests
      - parallel-tests-job:
          parallelism: 5
          <<: *compile_and_test_filters
          requires:
            - compile-only-job
      - deploy-workspace-jar-job:
          filters:
            branches:
              only:
                - develop
                - study-server-parallel-tests
          requires:
            - parallel-tests-job
      - store-jar-job:
          filters:
            branches:
              only:
                - *rc
                - *hotfix
                - study-server-parallel-tests
          requires:
            - parallel-tests-job

  deploy-workflow:
    jobs:
      - deploy-stored-jar-job:
          filters:
            branches:
              only:
                - test
                - staging
                - production
                # @todo remove when done
                - test_deleteme1

  deploy-api-docs-workflow:
    jobs:
      - deploy-docs-job:
          filters:
            branches:
              only:
                - develop
                - DDP-4548_OpenAPIToGAE



