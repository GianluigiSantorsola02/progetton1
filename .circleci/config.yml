version: 2.1
references:
  maven_cache_key: &maven_cache_key
                   maven-deps-repo

executors:
  maven-executor:
    docker: # todo: create new image endpoint, add this in admin tab for faster starts
      - image: broadinstitute/study-server-build:back-end-2020-03-11A
      - image: circleci/mysql:5.7-ram
        environment: &DB_VARS
          MYSQL_ROOT_PASSWORD: rootpw
          MYSQL_DATABASE: test_db
          MYSQL_USER: user
          MYSQL_PASSWORD: passw0rd
    resource_class: medium+
    working_directory: ~/repo/pepper-apis

commands:
  setup-shared-env:
    description: "Setup shared ENV vars used by multiple scripts"
    steps:
      - run:
          name: Set environment to be used by build
          command: |
            echo "export VAULT_TOKEN=`vault write -field=token auth/approle/login role_id=$VAULT_ROLE_ID secret_id=$VAULT_ROLE_SECRET_ID`" >> $BASH_ENV
            echo "export SHORT_GIT_SHA=`echo '<< pipeline.git.revision >>' | cut -c 1-7`" >> $BASH_ENV
            echo 'export BUILDS_BUCKET=ddp-build-artifacts' >> $BASH_ENV
            source $BASH_ENV

  common-setup:
    description: "Common setup for all jobs"
    steps:
      - checkout: 
          path: ~/repo
      - setup-shared-env          

  set-deployment-env:
    description: "Determine the deploy target and set the ENVIRONMENT var"
    steps:
      - run:
          name: Determine deployment environment for branch << pipeline.git.branch >>
          command: |
            case "<< pipeline.git.branch >>" in
            develop)
              DEPLOY_ENV=dev
            ;;
              study-server-to-appengine)
              DEPLOY_ENV=dev
            ;;
            test)
              DEPLOY_ENV=test
            ;;
            staging)
              DEPLOY_ENV=staging
            ;;
            staging)
              DEPLOY_ENV=prod
            ;;
            *)
              echo "Cannot map << pipeline.git.branch >> to a deployment environment"
              exit 17
            ;;
            esac
            echo "Setting deployment ENVIRONMENT to $DEPLOY_ENV"
            echo "export ENVIRONMENT=$DEPLOY_ENV" >> $BASH_ENV
            source $BASH_ENV          

  render-configs:
    description: render config files
    steps:
      - run:
          name: show environment variables
          command: env
      - run:
          name: api-build.sh
          command: ./api-build.sh v1 ${ENVIRONMENT:-dev} . --gae-config
          environment:
            USE_DOCKER: false


  build-jar:
    description: "Install maven dependencies"
    steps:
      - run:
          name: Show pipeline vars
          command: |
            echo "pipeline.id << pipeline.id >>"
            echo "pipeline.number	 << pipeline.number	 >>"
            echo "pipeline.project.git_url << pipeline.project.git_url >>"
            echo "pipeline.project.type << pipeline.project.type >>"
            echo "pipeline.git.tag << pipeline.git.tag >>"
            echo "pipeline.git.branch << pipeline.git.branch >>"
            echo "pipeline.git.revision << pipeline.git.revision >>"
            echo "pipeline.git.base_revision << pipeline.git.base_revision >>"
      # For now we are going to hard-code "dev" when we generate config for jar builds
      - render-configs  
      - run:
          name: Waiting for MySQL to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1
      - restore_cache:
          key: *maven_cache_key
      - run:
          name: Setup test databases
          command: |
            mysql -h 127.0.0.1 -u root --password=$MYSQL_ROOT_PASSWORD test_db --execute="CREATE DATABASE studyservicedb CHARACTER SET utf8 COLLATE utf8_general_ci"
            mysql -h 127.0.0.1 -u root --password=$MYSQL_ROOT_PASSWORD test_db --execute="CREATE DATABASE housekeepingdb CHARACTER SET utf8 COLLATE utf8_general_ci"
          environment: *DB_VARS
      - run:
          name: Run maven
          command: |
            # @todo remove test
            mvn --batch-mode -Dtest=ProfileRouteTest -file pom.xml package \
                     -Ditext.license=output-config/itextkey.xml \
                     -Dddp.firecloudKeysDir=output-config/fc_keys \
                     -Dconfig.file=output-config/testing-circleci.conf \
                     install
          #            mvn --batch-mode --fail-never -file smoketest-pom.xml install package test
#            mvn --batch-mode --fail-never -file housekeeping.xml install package test           
          # working_directory: ~/repo/pepper-apis
      - save_cache:
          key: *maven_cache_key
          paths:
            - ~/.m2
      - store_test_results: # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard.
          # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: target/surefire-reports

  store-jar:
    steps:
      - run:
          name: Store build jar
          command: |
            set -u
            vault read -format=json  secret/pepper/prod/v1/conf | jq -r .data.gcp.serviceKey | gcloud auth activate-service-account --key-file=-
            DATE=`date +%F`
            JAR_BASE_NAME=DataDonationPlatform
            JAR_FILE_NAME="${JAR_BASE_NAME}_${DATE}_${SHORT_GIT_SHA}.jar"
            LOCAL_JAR_FILE_PATH="./target/${JAR_BASE_NAME}.jar"
            gsutil cp  ${LOCAL_JAR_FILE_PATH} "gs://${BUILDS_BUCKET}/ddp-study-server-pepper-apis/${JAR_FILE_NAME}"
  
  retrieve-jar:
    steps:
      - run:
          name: Retrieve jar from bucket
          command: |
            set -u
            set +e
            # @TODO remove when done
            SHORT_GIT_SHA=aed6df4
            vault read -format=json  secret/pepper/prod/v1/conf | jq -r .data.gcp.serviceKey | gcloud auth activate-service-account --key-file=-
            JAR_BASE_NAME=DataDonationPlatform
            JAR_FILE_URL_PATTERN="gs://${BUILDS_BUCKET}/ddp-study-server-pepper-apis/${JAR_BASE_NAME}_*_${SHORT_GIT_SHA}.jar"
            echo "Checking for ${JAR_FILE_URL_PATTERN}"
            # For some reason following line generating exit code 1 every time in CircleCI. Use set +e so script can continue
            JAR_FILE_URL=`gsutil ls $JAR_FILE_URL_PATTERN  | sort -r | head -1`
            if [ -z $JAR_FILE_URL ]
              then
                echo "Could not find archive using pattern ${JAR_FILE_URL_PATTERN}"
                exit 1
            fi
            JAR_FILE_PATH="target/${JAR_BASE_NAME}.jar"
            mkdir -p $(dirname $JAR_FILE_PATH)
            gsutil cp  $JAR_FILE_URL $JAR_FILE_PATH
            echo ""


  deploy-jar:
    steps:
      - set-deployment-env
      - render-configs
      - run:
          name: Gather deployment assets
          command: |
            mkdir deployment_assets
            cd deployment_assets
            cp ../target/DataDonationPlatform.jar .
            cp ../src/appengine/app.yaml .
            cp ../output-config/application.conf .
            cp -r ../output-config/fc_keys .
      - run:
          name: Deploy to GAE
          command: |
            set -u
            vault read -format=json secret/pepper/${ENVIRONMENT}/v1/conf  | jq -r .data.gcp.serviceKey | gcloud auth activate-service-account --key-file=-
            gcloud app deploy --version="${SHORT_GIT_SHA}" --stop-previous-version --project "broad-ddp-${ENVIRONMENT}" deployment_assets/app.yaml


jobs:
  build-jar-job:
    executor:
      name: maven-executor
    steps:
      - common-setup
      - build-jar

  build-and-store-jar-job:
    executor:
      name: maven-executor
    steps:
      - common-setup
      - build-jar
      - store-jar   

  deploy-jar-job:
    executor:
      name: maven-executor
    steps:
      - common-setup
      - retrieve-jar
      - deploy-jar

  build-and-deploy-job:
    executor:
      name: maven-executor
    steps:
      - common-setup
      - build-jar
      - deploy-jar      

workflows:
  version: 2
  build-deploy:
    jobs:
      - deploy-jar-job:
          filters:
            branches:
              only: study-server-to-appengine
